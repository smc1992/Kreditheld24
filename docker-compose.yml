version: '3.8'

services:
  # Next.js Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://kreditheld:${DB_PASSWORD}@postgres:5432/kreditheld24
      - REDIS_URL=redis://redis:6379
      - NEXT_PUBLIC_SITE_URL=https://kreditheld24.de
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./uploads:/app/uploads
    restart: unless-stopped
    labels:
      - "coolify.managed=true"
      - "coolify.type=application"
      - "coolify.domain=kreditheld24.de"

  # Zinssatz-Scraper
  scraper:
    build:
      context: ./scraper
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://kreditheld:${DB_PASSWORD}@postgres:5432/kreditheld24
      - REDIS_URL=redis://redis:6379
      - CRON_SECRET=${CRON_SECRET}
      - CRON_SCHEDULE=0 6 * * *
      - TIMEZONE=Europe/Berlin
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - ALERT_EMAIL=${ALERT_EMAIL}
    depends_on:
      - postgres
      - redis
    volumes:
      - scraper_data:/app/data
      - scraper_logs:/app/logs
    restart: unless-stopped
    labels:
      - "coolify.managed=true"
      - "coolify.type=worker"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=kreditheld24
      - POSTGRES_USER=kreditheld
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    labels:
      - "coolify.managed=true"
      - "coolify.type=database"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kreditheld -d kreditheld24"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    labels:
      - "coolify.managed=true"
      - "coolify.type=cache"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (optional, Coolify handles this)
  # nginx:
  #   image: nginx:alpine
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - frontend
  #   restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  scraper_data:
    driver: local
  scraper_logs:
    driver: local

networks:
  default:
    name: kreditheld24_network
    driver: bridge